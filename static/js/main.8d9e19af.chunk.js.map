{"version":3,"sources":["components/loading/Loading.tsx","components/MainPage.tsx","components/helpFunction.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Loading","className","type","color","height","width","MainPage","useState","quotations","setQuotations","index","setIndex","disabled","setDisabled","useEffect","axios","get","then","response","data","length","quote","author","Button","onClick","min","max","Math","floor","random","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sTAiBkBA,EAbF,WACZ,OACI,qBAAKC,UAAU,UAAf,SACI,cAAC,IAAD,CACIC,KAAM,OACNC,MAAO,QACPC,OAAQ,IACRC,MAAO,S,gBCmDRC,EApDE,WACb,MAAoCC,qBAApC,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA0BF,mBAAmB,IAA7C,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAgCJ,oBAAkB,GAAlD,mBAAOK,EAAP,KAAiBC,EAAjB,KAEAC,qBAAW,WACPC,IAAMC,IARO,yIASRC,MAAM,SAAAC,GACHT,EAAcS,EAASC,WAEjC,IAcF,OAAIX,EAII,sBAAKP,UAAU,YAAf,UACI,sBAAKA,UAAU,OAAf,UACI,uBAAMA,UAAW,aAAjB,oBACYS,EAAMU,OAAS,GAAKZ,EAAWE,EAAMA,EAAMU,OAAQ,IAAIC,SAEnE,4CACaX,EAAMU,OAAS,GAAKZ,EAAWE,EAAMA,EAAMU,OAAS,IAAIE,aAGzE,sBAAKrB,UAAU,UAAf,UACI,cAACsB,EAAA,EAAD,CACIX,SAAUA,EACVY,QArBP,WACTb,EAAS,CAACD,EAAMA,EAAMU,OAAQ,KAC9BP,GAAY,IAiBA,sBAKA,cAACU,EAAA,EAAD,CAAQC,QA/BX,WCtBW,IAACC,EAAaC,EDuBlCf,EAAS,GAAD,mBAAKD,GAAL,ECvBae,EDuBY,ECvBCC,EDuBElB,EAAYY,OAAS,ECtBtDO,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,MDuB9Cf,EAAMU,OAAS,GACdP,GAAY,IA4BJ,wBAlBJ,cAAC,EAAD,KEvBDiB,MARf,WACE,OACE,qBAAK7B,UAAU,MAAf,SACE,cAAC,EAAD,OCOS8B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8d9e19af.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactLoading from 'react-loading';\r\nimport './loading.sass';\r\n\r\nconst Loading = (): JSX.Element => {\r\n    return (\r\n        <div className='loading'>\r\n            <ReactLoading\r\n                type={'spin'}\r\n                color={'black'}\r\n                height={667}\r\n                width={375}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport  default   Loading ;","import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Loading from './loading/Loading';\r\nimport './main-page.sass';\r\nimport { Button } from '@mui/material';\r\nimport { randomNumber } from './helpFunction';\r\nimport { QuotationsType } from './quoateType';\r\n\r\nconst url : string = 'https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json'\r\n\r\nconst MainPage = () => {\r\n    const [quotations, setQuotations] = useState<QuotationsType[]>();\r\n    const [index, setIndex] = useState<number[]>([]);\r\n    const [disabled, setDisabled] = useState<boolean>(true);\r\n\r\n    useEffect( ()=> {\r\n        axios.get(url)\r\n            .then( response => {\r\n                setQuotations(response.data);\r\n            })\r\n    },[])\r\n\r\n    const next = () => {\r\n        setIndex([...index, randomNumber(0, quotations!.length - 1)]);\r\n        if(index.length > 0){\r\n            setDisabled(false);\r\n        }\r\n    }\r\n\r\n    const prev = () => {\r\n        setIndex([index[index.length -2]]);\r\n        setDisabled(true);\r\n    }\r\n\r\n    if(!quotations){\r\n        return( <Loading/> )\r\n    } else {\r\n        return (\r\n            <div className='main-page'>\r\n                <div className='data'>\r\n                    <span className={'data-quote'}>\r\n                        Quote: {index.length > 0 && quotations[index[index.length -1]].quote }\r\n                    </span>\r\n                    <span>\r\n                        Author: {index.length > 0 && quotations[index[index.length - 1]].author }\r\n                    </span>\r\n                </div>\r\n                <div className='buttons'>\r\n                    <Button\r\n                        disabled={disabled}\r\n                        onClick={prev}>\r\n                        Previous\r\n                    </Button>\r\n                    <Button onClick={next}>\r\n                        Next\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default MainPage;","export const randomNumber = (min: number, max: number): number => {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport MainPage from './components/MainPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainPage/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}